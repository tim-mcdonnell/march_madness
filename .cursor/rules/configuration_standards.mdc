---
description: Standards and patterns for configuration management in the NCAA March Madness Predictor. Use when working with or creating configuration files.
globs: ["config/*.yaml", "config/*.yml", "src/config/*.py"]
alwaysApply: false
---

# Configuration Standards

## Configuration Philosophy

The NCAA March Madness Predictor uses a configuration-driven approach to ensure:

1. **Reproducibility**: All parameters used in model training and evaluation are tracked
2. **Flexibility**: Different configurations can be tested without code changes
3. **Clarity**: Explicit declaration of parameters used in each run
4. **Version Control**: Configuration evolution can be tracked over time

## Configuration Structure

The project uses YAML files stored in the `config/` directory for configuration management, with the following structure:

```
config/
├── data/               # Data processing configurations
│   ├── loader.yaml     # Data loading configuration
│   └── processor.yaml  # Data processing configuration
├── features/           # Feature engineering configurations
│   ├── builder.yaml    # Feature builder configuration 
│   └── selector.yaml   # Feature selection configuration
├── models/             # Model configurations
│   ├── lstm.yaml       # LSTM model configuration
│   ├── transformer.yaml # Transformer model configuration
│   └── ensemble.yaml   # Ensemble model configuration
├── pipeline/           # Pipeline configurations
│   ├── eda.yaml        # EDA pipeline configuration
│   ├── training.yaml   # Training pipeline configuration
│   └── prediction.yaml # Prediction pipeline configuration
├── environment.yaml    # Environment-specific configuration
└── default.yaml        # Default configuration values
```

## Configuration Format

All configuration files follow a standard YAML format:

```yaml
# Configuration file for [component]
# Created: YYYY-MM-DD
# Last modified: YYYY-MM-DD

version: "1.0"  # Configuration version

description: "Configuration for [component]"

parameters:
  # Component-specific parameters
  parameter1: value1
  parameter2: value2
  
  # Nested parameters
  nested:
    param1: value1
    param2: value2
    
  # List parameters
  list_param:
    - item1
    - item2
    
  # Dictionary parameters
  dict_param:
    key1: value1
    key2: value2
```

## Configuration Loading

The project uses a central configuration manager (`src/config/config_manager.py`) to load and access configuration values:

```python
from src.config.config_manager import ConfigManager

# Load configuration
config = ConfigManager.load("models/lstm.yaml")

# Access configuration values
learning_rate = config.get("parameters.learning_rate")
hidden_size = config.get("parameters.model.hidden_size")
```

## Configuration Validation

Configuration files are validated against schemas to ensure correctness:

1. Each configuration file must have a corresponding schema file in `src/config/schemas/`
2. The `ConfigManager` automatically validates configurations against their schemas
3. Runtime errors are raised for invalid configurations

## Model Configuration Standards

Model configurations must include the following sections:

```yaml
parameters:
  # Model architecture parameters
  model:
    type: "lstm"  # Model type
    hidden_size: 128  # Hidden layer size
    num_layers: 2  # Number of layers
    dropout: 0.2  # Dropout rate
    
  # Training parameters
  training:
    batch_size: 64
    learning_rate: 0.001
    num_epochs: 100
    early_stopping_patience: 10
    
  # Evaluation parameters
  evaluation:
    metrics: ["accuracy", "f1_score", "log_loss"]
    test_split: 0.2
```

## Feature Configuration Standards

Feature configurations must include:

```yaml
parameters:
  features:
    # List of feature sets to include
    sets:
      - name: "team_stats"
        enabled: true
        parameters:
          window_size: 5
      - name: "tournament_history"
        enabled: true
        parameters:
          years_back: 3
          
  # Feature engineering parameters
  engineering:
    normalization: "min_max"  # Normalization method
    scaling: true  # Whether to scale features
    imputation: "mean"  # Imputation method for missing values
```

## Pipeline Configuration Standards

Pipeline configurations must specify:

```yaml
parameters:
  # Pipeline steps
  steps:
    - name: "data_loading"
      enabled: true
      config: "data/loader.yaml"
    - name: "feature_engineering"
      enabled: true
      config: "features/builder.yaml"
    - name: "model_training"
      enabled: true
      config: "models/lstm.yaml"
      
  # Execution parameters
  execution:
    parallel: true  # Whether to run steps in parallel
    workers: 4  # Number of worker processes
    checkpoint: true  # Whether to save checkpoints
```

## Environment Configuration

Environment-specific configurations (like file paths and resource limits) are stored in `environment.yaml`:

```yaml
parameters:
  # Data paths
  paths:
    raw_data: "data/raw"
    processed_data: "data/processed"
    feature_data: "data/features"
    models: "models"
    reports: "reports"
    
  # Resource limits
  resources:
    max_memory: "8GB"
    gpu_enabled: true
    num_workers: 4
```

## Configuration Inheritance

Configurations can inherit from and override other configurations:

```yaml
# Inherit from base configuration
base: "models/base.yaml"

# Override specific parameters
parameters:
  model:
    hidden_size: 256  # Override hidden size
  
  # Add new parameters
  new_parameter: value
```

## Configuration Best Practices

1. **Versioning**: Include a version number in each configuration file
2. **Documentation**: Add comments to explain the purpose of each parameter
3. **Default Values**: Provide sensible default values in `default.yaml`
4. **Validation**: Create schemas for all configuration files
5. **Modularity**: Split configurations by component for clarity
6. **Consistency**: Use consistent naming patterns across configurations
7. **Timestamps**: Include created and last modified timestamps

## Example Configuration Files

### Model Configuration Example

```yaml
# LSTM Model Configuration
# Created: 2023-03-01
# Last modified: 2023-03-15

version: "1.0"

description: "Configuration for LSTM prediction model"

parameters:
  model:
    type: "lstm"
    hidden_size: 128
    num_layers: 2
    dropout: 0.2
    bidirectional: true
    
  training:
    batch_size: 64
    learning_rate: 0.001
    num_epochs: 100
    early_stopping_patience: 10
    optimizer: "adam"
    
  evaluation:
    metrics: ["accuracy", "f1_score", "log_loss"]
    test_split: 0.2
    cv_folds: 5
```

### Feature Configuration Example

```yaml
# Team Statistics Feature Configuration
# Created: 2023-03-01
# Last modified: 2023-03-10

version: "1.0"

description: "Configuration for team statistics feature set"

parameters:
  features:
    - name: "offensive_efficiency"
      enabled: true
      window_size: 5
    - name: "defensive_efficiency"
      enabled: true
      window_size: 5
    - name: "tempo"
      enabled: true
      window_size: 5
    - name: "shooting_effectiveness"
      enabled: true
      window_size: 5
      
  transformation:
    normalization: "min_max"
    scaling: true
    imputation: "mean"
```

## Common Pitfalls

1. **Hardcoded Values**: Avoid hardcoding values that should be configurable
2. **Inconsistent Naming**: Use consistent parameter naming across configurations
3. **Missing Documentation**: Always document the purpose of each parameter
4. **Invalid Types**: Ensure parameter types match expected values
5. **Environment Dependencies**: Keep environment-specific parameters separate
6. **Missing Validation**: Always validate configurations before use
7. **Circular Dependencies**: Avoid circular dependencies between configurations 