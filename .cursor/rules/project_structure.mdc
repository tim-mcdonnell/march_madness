---
description: Comprehensive guide to the NCAA March Madness Predictor project structure, organization, and component relationships. Use when creating new files or understanding code relationships.
globs: ["*.py", "README.md"]
alwaysApply: false
---

# Project Structure - NCAA March Madness Predictor

## Directory Structure

```
march_madness/
├── config/                 # YAML configuration files
│   └── pipeline_config.yaml # Main pipeline configuration
├── data/                   # Data storage (gitignored)
│   ├── raw/                # Original unmodified data
│   ├── processed/          # Cleaned and transformed data
│   └── features/           # Engineered features
├── docs/                   # Documentation files
├── models/                 # Saved model files
├── reports/                # Analysis reports and visualizations
│   ├── findings/           # Markdown reports of analysis findings 
│   └── figures/            # Visualizations generated from analysis
├── src/                    # Source code
│   ├── data/               # Data processing modules
│   ├── eda/                # Exploratory data analysis scripts
│   ├── features/           # Feature engineering
│   ├── models/             # Model code
│   ├── pipeline/           # Pipeline framework
│   └── visualization/      # Visualization code
├── tests/                  # Test code
├── .github/                # GitHub configurations
├── run_pipeline.py         # Main pipeline execution script
└── pyproject.toml          # Project configuration and dependencies
```

## Core Modules & Relationships

### Pipeline Framework (`src/pipeline/`)
- **`cli.py`**: Command-line interface for the pipeline
- **`config.py`**: Configuration management (loading, validation)
- **`data_stage.py`**: Implementation of the data collection stage
- **`data_management.py`**: Utilities for data organization and cleaning

The pipeline is designed to be modular, with separate stages that can run independently:
1. **Data Collection**: Fetches and stores raw data
2. **Data Processing**: Cleans and transforms raw data
3. **Feature Engineering**: Creates model features
4. **Model Training**: Trains prediction models
5. **Bracket Generation**: Creates optimized brackets

### Data Processing (`src/data/`)
- **Data Sources**: Data is sourced exclusively from sportsdataverse's hoopR-mbb-data repository
- **Data Categories**: play_by_play, player_box, schedules, team_box
- **Data Format**: Parquet files, loaded using Polars (not Pandas)
- **Data Years**: 2003-2025 (22+ years of historical data)

### Feature Engineering (`src/features/`)
- Team statistics (offensive/defensive efficiency, etc.)
- Historical tournament performance
- Match-up specific features
- Temporal features (trends, momentum)

### Models (`src/models/`)
- PyTorch-based neural network architecture
- Training utilities
- Evaluation metrics
- Prediction generation

### Visualization (`src/visualization/`)
- Plotly/Dash-based interactive visualizations
- Bracket visualization utilities
- Performance metric plotting

## Technology Stack
- **Python 3.11+**: Core language
- **uv**: Package manager
- **Polars**: DataFrame library (NOT pandas)
- **PyTorch**: Deep learning framework
- **Plotly Dash**: Interactive visualization
- **Parquet/PyArrow**: Data storage
- **YAML**: Configuration

## Data Storage Locations
- Raw data: `data/raw/{category}/{year}.parquet`
- Processed data: `data/processed/{category}/{year}.parquet`
- Feature data: `data/features/{feature_set}/{year}.parquet`
- Reports: `reports/findings/{analysis_name}.md`
- Visualizations: `reports/figures/{viz_name}.{ext}`

## Common File Locations

### Configuration Files
- Main pipeline configuration: `config/pipeline_config.yaml`
- Test configuration: `config/test_config.yaml`

### Documentation Files
- User guide: `docs/user_guide/`
- Developer guide: `docs/developer_guide/`
- Reference documentation: `docs/reference/`

### Output Files
- Model files: `models/{model_type}/{model_name}.pt`
- Prediction results: `results/predictions/{year}_{model}.csv`
- Performance metrics: `results/metrics/{model}_metrics.json` 